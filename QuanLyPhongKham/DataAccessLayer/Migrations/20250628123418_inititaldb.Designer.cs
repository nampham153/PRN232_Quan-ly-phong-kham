// <auto-generated />
using System;
using DataAccessLayer.dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    [Migration("20250628123418_inititaldb")]
    partial class inititaldb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            PasswordHash = "hashed_password_1",
                            RoleId = 1,
                            Status = true,
                            Username = "admin1"
                        },
                        new
                        {
                            AccountId = 2,
                            PasswordHash = "hashed_password_2",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor1"
                        },
                        new
                        {
                            AccountId = 3,
                            PasswordHash = "hashed_password_3",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor2"
                        },
                        new
                        {
                            AccountId = 4,
                            PasswordHash = "hashed_password_4",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor3"
                        },
                        new
                        {
                            AccountId = 5,
                            PasswordHash = "hashed_password_5",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor4"
                        },
                        new
                        {
                            AccountId = 6,
                            PasswordHash = "hashed_password_6",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor5"
                        },
                        new
                        {
                            AccountId = 7,
                            PasswordHash = "hashed_password_7",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor6"
                        },
                        new
                        {
                            AccountId = 8,
                            PasswordHash = "hashed_password_8",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor7"
                        },
                        new
                        {
                            AccountId = 9,
                            PasswordHash = "hashed_password_9",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor8"
                        },
                        new
                        {
                            AccountId = 10,
                            PasswordHash = "hashed_password_10",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor9"
                        },
                        new
                        {
                            AccountId = 11,
                            PasswordHash = "hashed_password_11",
                            RoleId = 3,
                            Status = true,
                            Username = "staff1"
                        },
                        new
                        {
                            AccountId = 12,
                            PasswordHash = "hashed_password_12",
                            RoleId = 4,
                            Status = true,
                            Username = "patient1"
                        },
                        new
                        {
                            AccountId = 13,
                            PasswordHash = "hashed_password_13",
                            RoleId = 4,
                            Status = true,
                            Username = "patient2"
                        },
                        new
                        {
                            AccountId = 14,
                            PasswordHash = "hashed_password_14",
                            RoleId = 4,
                            Status = true,
                            Username = "patient3"
                        },
                        new
                        {
                            AccountId = 15,
                            PasswordHash = "hashed_password_15",
                            RoleId = 4,
                            Status = true,
                            Username = "patient4"
                        },
                        new
                        {
                            AccountId = 16,
                            PasswordHash = "hashed_password_16",
                            RoleId = 4,
                            Status = true,
                            Username = "patient5"
                        },
                        new
                        {
                            AccountId = 17,
                            PasswordHash = "hashed_password_17",
                            RoleId = 4,
                            Status = true,
                            Username = "patient6"
                        },
                        new
                        {
                            AccountId = 18,
                            PasswordHash = "hashed_password_18",
                            RoleId = 4,
                            Status = true,
                            Username = "patient7"
                        },
                        new
                        {
                            AccountId = 19,
                            PasswordHash = "hashed_password_19",
                            RoleId = 4,
                            Status = true,
                            Username = "patient8"
                        },
                        new
                        {
                            AccountId = 20,
                            PasswordHash = "hashed_password_20",
                            RoleId = 4,
                            Status = true,
                            Username = "patient9"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            RecordId = 1,
                            Date = new DateTime(2025, 5, 29, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(3993),
                            Diagnosis = "Common cold",
                            Note = "Rest and fluids recommended",
                            PatientId = 1,
                            Symptoms = "Fever, headache",
                            UserId = 2
                        },
                        new
                        {
                            RecordId = 2,
                            Date = new DateTime(2025, 6, 3, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4010),
                            Diagnosis = "Muscle strain",
                            Note = "Apply heat therapy",
                            PatientId = 2,
                            Symptoms = "Chest pain",
                            UserId = 2
                        },
                        new
                        {
                            RecordId = 3,
                            Date = new DateTime(2025, 6, 8, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4012),
                            Diagnosis = "Asthma",
                            Note = "Prescribed inhaler",
                            PatientId = 3,
                            Symptoms = "Shortness of breath",
                            UserId = 3
                        },
                        new
                        {
                            RecordId = 4,
                            Date = new DateTime(2025, 6, 13, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4013),
                            Diagnosis = "Hypertension",
                            Note = "Lifestyle changes needed",
                            PatientId = 4,
                            Symptoms = "High blood pressure",
                            UserId = 3
                        },
                        new
                        {
                            RecordId = 5,
                            Date = new DateTime(2025, 6, 18, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4016),
                            Diagnosis = "Gastritis",
                            Note = "Avoid spicy foods",
                            PatientId = 5,
                            Symptoms = "Stomach pain",
                            UserId = 4
                        },
                        new
                        {
                            RecordId = 6,
                            Date = new DateTime(2025, 6, 20, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4017),
                            Diagnosis = "Arthritis",
                            Note = "Physical therapy recommended",
                            PatientId = 6,
                            Symptoms = "Joint pain",
                            UserId = 4
                        },
                        new
                        {
                            RecordId = 7,
                            Date = new DateTime(2025, 6, 23, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4019),
                            Diagnosis = "Allergic reaction",
                            Note = "Avoid allergens",
                            PatientId = 7,
                            Symptoms = "Skin rash",
                            UserId = 5
                        },
                        new
                        {
                            RecordId = 8,
                            Date = new DateTime(2025, 6, 25, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4020),
                            Diagnosis = "Type 2 Diabetes",
                            Note = "Diet control important",
                            PatientId = 8,
                            Symptoms = "Diabetes symptoms",
                            UserId = 5
                        },
                        new
                        {
                            RecordId = 9,
                            Date = new DateTime(2025, 6, 26, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4023),
                            Diagnosis = "Anxiety disorder",
                            Note = "Counseling recommended",
                            PatientId = 9,
                            Symptoms = "Anxiety",
                            UserId = 6
                        },
                        new
                        {
                            RecordId = 10,
                            Date = new DateTime(2025, 6, 27, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4024),
                            Diagnosis = "Hay fever",
                            Note = "Seasonal allergy",
                            PatientId = 1,
                            Symptoms = "Allergic rhinitis",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            MedicineName = "Paracetamol",
                            Unit = "tablet",
                            Usage = "Take 1-2 tablets every 4-6 hours"
                        },
                        new
                        {
                            MedicineId = 2,
                            MedicineName = "Amoxicillin",
                            Unit = "capsule",
                            Usage = "Take 1 capsule 3 times daily"
                        },
                        new
                        {
                            MedicineId = 3,
                            MedicineName = "Ibuprofen",
                            Unit = "tablet",
                            Usage = "Take 1 tablet every 8 hours"
                        },
                        new
                        {
                            MedicineId = 4,
                            MedicineName = "Aspirin",
                            Unit = "tablet",
                            Usage = "Take 1 tablet daily"
                        },
                        new
                        {
                            MedicineId = 5,
                            MedicineName = "Metformin",
                            Unit = "tablet",
                            Usage = "Take 1 tablet twice daily with meals"
                        },
                        new
                        {
                            MedicineId = 6,
                            MedicineName = "Lisinopril",
                            Unit = "tablet",
                            Usage = "Take 1 tablet once daily"
                        },
                        new
                        {
                            MedicineId = 7,
                            MedicineName = "Omeprazole",
                            Unit = "capsule",
                            Usage = "Take 1 capsule before breakfast"
                        },
                        new
                        {
                            MedicineId = 8,
                            MedicineName = "Salbutamol",
                            Unit = "inhaler",
                            Usage = "2 puffs when needed"
                        },
                        new
                        {
                            MedicineId = 9,
                            MedicineName = "Diazepam",
                            Unit = "tablet",
                            Usage = "Take 1 tablet when needed"
                        },
                        new
                        {
                            MedicineId = 10,
                            MedicineName = "Cetirizine",
                            Unit = "tablet",
                            Usage = "Take 1 tablet once daily"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            AccountId = 12,
                            Address = "123 Nguyen Trai, Hanoi",
                            AvatarPath = "/images/avatars/patient1.jpg",
                            DOB = new DateTime(1995, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient1@email.com",
                            FullName = "Nguyen Thi K",
                            Gender = "Female",
                            Phone = "0987654321"
                        },
                        new
                        {
                            PatientId = 2,
                            AccountId = 13,
                            Address = "456 Le Loi, Ho Chi Minh",
                            AvatarPath = "/images/avatars/patient2.jpg",
                            DOB = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient2@email.com",
                            FullName = "Tran Van L",
                            Gender = "Male",
                            Phone = "0987654322"
                        },
                        new
                        {
                            PatientId = 3,
                            AccountId = 14,
                            Address = "789 Tran Phu, Da Nang",
                            AvatarPath = "/images/avatars/patient3.jpg",
                            DOB = new DateTime(1988, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient3@email.com",
                            FullName = "Le Thi M",
                            Gender = "Female",
                            Phone = "0987654323"
                        },
                        new
                        {
                            PatientId = 4,
                            AccountId = 15,
                            Address = "321 Hai Ba Trung, Hue",
                            AvatarPath = "/images/avatars/patient4.jpg",
                            DOB = new DateTime(1990, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient4@email.com",
                            FullName = "Hoang Van N",
                            Gender = "Male",
                            Phone = "0987654324"
                        },
                        new
                        {
                            PatientId = 5,
                            AccountId = 16,
                            Address = "654 Dong Khoi, Can Tho",
                            AvatarPath = "/images/avatars/patient5.jpg",
                            DOB = new DateTime(1985, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient5@email.com",
                            FullName = "Pham Thi O",
                            Gender = "Female",
                            Phone = "0987654325"
                        },
                        new
                        {
                            PatientId = 6,
                            AccountId = 17,
                            Address = "987 Bach Dang, Hai Phong",
                            AvatarPath = "/images/avatars/patient6.jpg",
                            DOB = new DateTime(1993, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient6@email.com",
                            FullName = "Vu Van P",
                            Gender = "Male",
                            Phone = "0987654326"
                        },
                        new
                        {
                            PatientId = 7,
                            AccountId = 18,
                            Address = "147 Ly Thuong Kiet, Nha Trang",
                            AvatarPath = "/images/avatars/patient7.jpg",
                            DOB = new DateTime(1987, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient7@email.com",
                            FullName = "Dang Thi Q",
                            Gender = "Female",
                            Phone = "0987654327"
                        },
                        new
                        {
                            PatientId = 8,
                            AccountId = 19,
                            Address = "258 Quang Trung, Vung Tau",
                            AvatarPath = "/images/avatars/patient8.jpg",
                            DOB = new DateTime(1991, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient8@email.com",
                            FullName = "Bui Van R",
                            Gender = "Male",
                            Phone = "0987654328"
                        },
                        new
                        {
                            PatientId = 9,
                            AccountId = 20,
                            Address = "369 Le Duan, Dalat",
                            AvatarPath = "/images/avatars/patient9.jpg",
                            DOB = new DateTime(1989, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient9@email.com",
                            FullName = "Do Thi S",
                            Gender = "Female",
                            Phone = "0987654329"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("RecordId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            Dosage = "500mg twice daily",
                            MedicineId = 1,
                            Quantity = 20,
                            RecordId = 1
                        },
                        new
                        {
                            PrescriptionId = 2,
                            Dosage = "400mg three times daily",
                            MedicineId = 3,
                            Quantity = 15,
                            RecordId = 2
                        },
                        new
                        {
                            PrescriptionId = 3,
                            Dosage = "2 puffs as needed",
                            MedicineId = 8,
                            Quantity = 1,
                            RecordId = 3
                        },
                        new
                        {
                            PrescriptionId = 4,
                            Dosage = "10mg once daily",
                            MedicineId = 6,
                            Quantity = 30,
                            RecordId = 4
                        },
                        new
                        {
                            PrescriptionId = 5,
                            Dosage = "20mg before breakfast",
                            MedicineId = 7,
                            Quantity = 14,
                            RecordId = 5
                        },
                        new
                        {
                            PrescriptionId = 6,
                            Dosage = "200mg twice daily",
                            MedicineId = 3,
                            Quantity = 30,
                            RecordId = 6
                        },
                        new
                        {
                            PrescriptionId = 7,
                            Dosage = "10mg once daily",
                            MedicineId = 10,
                            Quantity = 10,
                            RecordId = 7
                        },
                        new
                        {
                            PrescriptionId = 8,
                            Dosage = "500mg twice daily",
                            MedicineId = 5,
                            Quantity = 60,
                            RecordId = 8
                        },
                        new
                        {
                            PrescriptionId = 9,
                            Dosage = "2mg as needed",
                            MedicineId = 9,
                            Quantity = 10,
                            RecordId = 9
                        },
                        new
                        {
                            PrescriptionId = 10,
                            Dosage = "10mg once daily",
                            MedicineId = 10,
                            Quantity = 30,
                            RecordId = 10
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");

                    b.HasData(
                        new
                        {
                            TokenId = 1,
                            AccountId = 1,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4136),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4134),
                            Token = "refresh_token_1"
                        },
                        new
                        {
                            TokenId = 2,
                            AccountId = 2,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4138),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4138),
                            Token = "refresh_token_2"
                        },
                        new
                        {
                            TokenId = 3,
                            AccountId = 3,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4140),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4139),
                            Token = "refresh_token_3"
                        },
                        new
                        {
                            TokenId = 4,
                            AccountId = 4,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4141),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4140),
                            Token = "refresh_token_4"
                        },
                        new
                        {
                            TokenId = 5,
                            AccountId = 5,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4142),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4142),
                            Token = "refresh_token_5"
                        },
                        new
                        {
                            TokenId = 6,
                            AccountId = 6,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4144),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4143),
                            Token = "refresh_token_6"
                        },
                        new
                        {
                            TokenId = 7,
                            AccountId = 7,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4145),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4144),
                            Token = "refresh_token_7"
                        },
                        new
                        {
                            TokenId = 8,
                            AccountId = 8,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4146),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4146),
                            Token = "refresh_token_8"
                        },
                        new
                        {
                            TokenId = 9,
                            AccountId = 9,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4148),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4147),
                            Token = "refresh_token_9"
                        },
                        new
                        {
                            TokenId = 10,
                            AccountId = 10,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4149),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4148),
                            Token = "refresh_token_10"
                        },
                        new
                        {
                            TokenId = 11,
                            AccountId = 11,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4150),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4150),
                            Token = "refresh_token_11"
                        },
                        new
                        {
                            TokenId = 12,
                            AccountId = 12,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4152),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4151),
                            Token = "refresh_token_12"
                        },
                        new
                        {
                            TokenId = 13,
                            AccountId = 13,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4153),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4152),
                            Token = "refresh_token_13"
                        },
                        new
                        {
                            TokenId = 14,
                            AccountId = 14,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4154),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4154),
                            Token = "refresh_token_14"
                        },
                        new
                        {
                            TokenId = 15,
                            AccountId = 15,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4155),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4155),
                            Token = "refresh_token_15"
                        },
                        new
                        {
                            TokenId = 16,
                            AccountId = 16,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4157),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4156),
                            Token = "refresh_token_16"
                        },
                        new
                        {
                            TokenId = 17,
                            AccountId = 17,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4158),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4158),
                            Token = "refresh_token_17"
                        },
                        new
                        {
                            TokenId = 18,
                            AccountId = 18,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4159),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4159),
                            Token = "refresh_token_18"
                        },
                        new
                        {
                            TokenId = 19,
                            AccountId = 19,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4160),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4160),
                            Token = "refresh_token_19"
                        },
                        new
                        {
                            TokenId = 20,
                            AccountId = 20,
                            CreatedDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4162),
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4161),
                            Token = "refresh_token_20"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Doctor"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Patient"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            Description = "Complete blood count analysis",
                            TestName = "Blood Test"
                        },
                        new
                        {
                            TestId = 2,
                            Description = "Chest X-ray examination",
                            TestName = "X-Ray"
                        },
                        new
                        {
                            TestId = 3,
                            Description = "Electrocardiogram test",
                            TestName = "ECG"
                        },
                        new
                        {
                            TestId = 4,
                            Description = "Abdominal ultrasound",
                            TestName = "Ultrasound"
                        },
                        new
                        {
                            TestId = 5,
                            Description = "Computed tomography scan",
                            TestName = "CT Scan"
                        },
                        new
                        {
                            TestId = 6,
                            Description = "Magnetic resonance imaging",
                            TestName = "MRI"
                        },
                        new
                        {
                            TestId = 7,
                            Description = "Urinalysis examination",
                            TestName = "Urine Test"
                        },
                        new
                        {
                            TestId = 8,
                            Description = "Glucose level test",
                            TestName = "Blood Sugar"
                        },
                        new
                        {
                            TestId = 9,
                            Description = "Lipid profile test",
                            TestName = "Cholesterol"
                        },
                        new
                        {
                            TestId = 10,
                            Description = "Hypertension screening",
                            TestName = "Blood Pressure"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.TestResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("ResultDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.HasIndex("RecordId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");

                    b.HasData(
                        new
                        {
                            ResultId = 1,
                            RecordId = 1,
                            ResultDetail = "WBC: 8.5, RBC: 4.2",
                            TestDate = new DateTime(2025, 5, 30, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4047),
                            TestId = 1,
                            UserId = 2
                        },
                        new
                        {
                            ResultId = 2,
                            RecordId = 2,
                            ResultDetail = "Chest clear, no abnormalities",
                            TestDate = new DateTime(2025, 6, 4, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4048),
                            TestId = 2,
                            UserId = 2
                        },
                        new
                        {
                            ResultId = 3,
                            RecordId = 3,
                            ResultDetail = "Normal heart rhythm",
                            TestDate = new DateTime(2025, 6, 9, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4049),
                            TestId = 3,
                            UserId = 3
                        },
                        new
                        {
                            ResultId = 4,
                            RecordId = 4,
                            ResultDetail = "BP: 140/90 mmHg",
                            TestDate = new DateTime(2025, 6, 14, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4051),
                            TestId = 10,
                            UserId = 3
                        },
                        new
                        {
                            ResultId = 5,
                            RecordId = 5,
                            ResultDetail = "Mild gastric inflammation",
                            TestDate = new DateTime(2025, 6, 19, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4052),
                            TestId = 4,
                            UserId = 4
                        },
                        new
                        {
                            ResultId = 6,
                            RecordId = 6,
                            ResultDetail = "Joint space narrowing",
                            TestDate = new DateTime(2025, 6, 21, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4053),
                            TestId = 2,
                            UserId = 4
                        },
                        new
                        {
                            ResultId = 7,
                            RecordId = 7,
                            ResultDetail = "Elevated eosinophils",
                            TestDate = new DateTime(2025, 6, 24, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4054),
                            TestId = 1,
                            UserId = 5
                        },
                        new
                        {
                            ResultId = 8,
                            RecordId = 8,
                            ResultDetail = "Glucose: 180 mg/dL",
                            TestDate = new DateTime(2025, 6, 26, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4055),
                            TestId = 8,
                            UserId = 5
                        },
                        new
                        {
                            ResultId = 9,
                            RecordId = 9,
                            ResultDetail = "Normal blood parameters",
                            TestDate = new DateTime(2025, 6, 27, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4056),
                            TestId = 1,
                            UserId = 6
                        },
                        new
                        {
                            ResultId = 10,
                            RecordId = 10,
                            ResultDetail = "Increased histamine levels",
                            TestDate = new DateTime(2025, 6, 28, 19, 34, 18, 570, DateTimeKind.Local).AddTicks(4057),
                            TestId = 7,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountId = 1,
                            DOB = new DateTime(1975, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@clinic.com",
                            FullName = "Admin User",
                            Gender = "Male",
                            Phone = "0901234560"
                        },
                        new
                        {
                            UserId = 2,
                            AccountId = 2,
                            DOB = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor1@clinic.com",
                            FullName = "Dr. Nguyen Van A",
                            Gender = "Male",
                            Phone = "0901234567"
                        },
                        new
                        {
                            UserId = 3,
                            AccountId = 3,
                            DOB = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor2@clinic.com",
                            FullName = "Dr. Le Thi B",
                            Gender = "Female",
                            Phone = "0901234568"
                        },
                        new
                        {
                            UserId = 4,
                            AccountId = 4,
                            DOB = new DateTime(1978, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor3@clinic.com",
                            FullName = "Dr. Tran Van C",
                            Gender = "Male",
                            Phone = "0901234570"
                        },
                        new
                        {
                            UserId = 5,
                            AccountId = 5,
                            DOB = new DateTime(1982, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor4@clinic.com",
                            FullName = "Dr. Pham Minh D",
                            Gender = "Male",
                            Phone = "0901234571"
                        },
                        new
                        {
                            UserId = 6,
                            AccountId = 6,
                            DOB = new DateTime(1975, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor5@clinic.com",
                            FullName = "Dr. Hoang Thi E",
                            Gender = "Female",
                            Phone = "0901234572"
                        },
                        new
                        {
                            UserId = 7,
                            AccountId = 7,
                            DOB = new DateTime(1988, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor6@clinic.com",
                            FullName = "Dr. Vu Van F",
                            Gender = "Male",
                            Phone = "0901234573"
                        },
                        new
                        {
                            UserId = 8,
                            AccountId = 8,
                            DOB = new DateTime(1983, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor7@clinic.com",
                            FullName = "Dr. Dang Thi G",
                            Gender = "Female",
                            Phone = "0901234574"
                        },
                        new
                        {
                            UserId = 9,
                            AccountId = 9,
                            DOB = new DateTime(1987, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor8@clinic.com",
                            FullName = "Dr. Bui Van H",
                            Gender = "Male",
                            Phone = "0901234575"
                        },
                        new
                        {
                            UserId = 10,
                            AccountId = 10,
                            DOB = new DateTime(1981, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor9@clinic.com",
                            FullName = "Dr. Do Thi I",
                            Gender = "Female",
                            Phone = "0901234576"
                        },
                        new
                        {
                            UserId = 11,
                            AccountId = 11,
                            DOB = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff1@clinic.com",
                            FullName = "Staff Ngo Van J",
                            Gender = "Male",
                            Phone = "0901234569"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Account", b =>
                {
                    b.HasOne("DataAccessLayer.models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccessLayer.models.MedicalRecord", b =>
                {
                    b.HasOne("DataAccessLayer.models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.User", "User")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.models.Patient", b =>
                {
                    b.HasOne("DataAccessLayer.models.Account", "Account")
                        .WithOne("Patient")
                        .HasForeignKey("DataAccessLayer.models.Patient", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataAccessLayer.models.Prescription", b =>
                {
                    b.HasOne("DataAccessLayer.models.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.MedicalRecord", "MedicalRecord")
                        .WithMany("Prescriptions")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("DataAccessLayer.models.RefreshToken", b =>
                {
                    b.HasOne("DataAccessLayer.models.Account", "Account")
                        .WithOne("RefreshToken")
                        .HasForeignKey("DataAccessLayer.models.RefreshToken", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataAccessLayer.models.TestResult", b =>
                {
                    b.HasOne("DataAccessLayer.models.MedicalRecord", "MedicalRecord")
                        .WithMany("TestResults")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.models.User", b =>
                {
                    b.HasOne("DataAccessLayer.models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("DataAccessLayer.models.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataAccessLayer.models.Account", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("RefreshToken")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.models.MedicalRecord", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("DataAccessLayer.models.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("DataAccessLayer.models.Patient", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("DataAccessLayer.models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DataAccessLayer.models.Test", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("DataAccessLayer.models.User", b =>
                {
                    b.Navigation("MedicalRecords");

                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
