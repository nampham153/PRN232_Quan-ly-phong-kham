// <auto-generated />
using System;
using DataAccessLayer.dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    partial class ClinicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCheck")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5207),
                            IsCheck = true,
                            PasswordHash = "hashed_password_1",
                            RoleId = 1,
                            Status = true,
                            Username = "admin1"
                        },
                        new
                        {
                            AccountId = 2,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5213),
                            IsCheck = true,
                            PasswordHash = "hashed_password_2",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor1"
                        },
                        new
                        {
                            AccountId = 3,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5214),
                            IsCheck = true,
                            PasswordHash = "hashed_password_3",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor2"
                        },
                        new
                        {
                            AccountId = 4,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5215),
                            IsCheck = true,
                            PasswordHash = "hashed_password_4",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor3"
                        },
                        new
                        {
                            AccountId = 5,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5216),
                            IsCheck = true,
                            PasswordHash = "hashed_password_5",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor4"
                        },
                        new
                        {
                            AccountId = 6,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5217),
                            IsCheck = true,
                            PasswordHash = "hashed_password_6",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor5"
                        },
                        new
                        {
                            AccountId = 7,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5218),
                            IsCheck = true,
                            PasswordHash = "hashed_password_7",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor6"
                        },
                        new
                        {
                            AccountId = 8,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5219),
                            IsCheck = true,
                            PasswordHash = "hashed_password_8",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor7"
                        },
                        new
                        {
                            AccountId = 9,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5220),
                            IsCheck = true,
                            PasswordHash = "hashed_password_9",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor8"
                        },
                        new
                        {
                            AccountId = 10,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5221),
                            IsCheck = true,
                            PasswordHash = "hashed_password_10",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor9"
                        },
                        new
                        {
                            AccountId = 11,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5222),
                            IsCheck = true,
                            PasswordHash = "hashed_password_11",
                            RoleId = 2,
                            Status = true,
                            Username = "doctor10"
                        },
                        new
                        {
                            AccountId = 12,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5223),
                            IsCheck = true,
                            PasswordHash = "hashed_password_12",
                            RoleId = 3,
                            Status = true,
                            Username = "staff1"
                        },
                        new
                        {
                            AccountId = 13,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5224),
                            IsCheck = true,
                            PasswordHash = "hashed_password_13",
                            RoleId = 4,
                            Status = true,
                            Username = "patient1"
                        },
                        new
                        {
                            AccountId = 14,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5225),
                            IsCheck = true,
                            PasswordHash = "hashed_password_14",
                            RoleId = 4,
                            Status = true,
                            Username = "patient2"
                        },
                        new
                        {
                            AccountId = 15,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5226),
                            IsCheck = true,
                            PasswordHash = "hashed_password_15",
                            RoleId = 4,
                            Status = true,
                            Username = "patient3"
                        },
                        new
                        {
                            AccountId = 16,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5226),
                            IsCheck = true,
                            PasswordHash = "hashed_password_16",
                            RoleId = 4,
                            Status = true,
                            Username = "patient4"
                        },
                        new
                        {
                            AccountId = 17,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5227),
                            IsCheck = true,
                            PasswordHash = "hashed_password_17",
                            RoleId = 4,
                            Status = true,
                            Username = "patient5"
                        },
                        new
                        {
                            AccountId = 18,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5228),
                            IsCheck = true,
                            PasswordHash = "hashed_password_18",
                            RoleId = 4,
                            Status = true,
                            Username = "patient6"
                        },
                        new
                        {
                            AccountId = 19,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5229),
                            IsCheck = true,
                            PasswordHash = "hashed_password_19",
                            RoleId = 4,
                            Status = true,
                            Username = "patient7"
                        },
                        new
                        {
                            AccountId = 20,
                            CreatedAt = new DateTime(2025, 7, 25, 14, 58, 46, 500, DateTimeKind.Utc).AddTicks(5230),
                            IsCheck = true,
                            PasswordHash = "hashed_password_20",
                            RoleId = 4,
                            Status = true,
                            Username = "patient8"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            RecordId = 1,
                            Date = new DateTime(2025, 6, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5561),
                            Diagnosis = "Common cold",
                            Note = "Rest and fluids recommended",
                            PatientId = 1,
                            Symptoms = "Fever, headache",
                            UserId = 2
                        },
                        new
                        {
                            RecordId = 2,
                            Date = new DateTime(2025, 6, 30, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5584),
                            Diagnosis = "Muscle strain",
                            Note = "Apply heat therapy",
                            PatientId = 2,
                            Symptoms = "Chest pain",
                            UserId = 3
                        },
                        new
                        {
                            RecordId = 3,
                            Date = new DateTime(2025, 7, 5, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5586),
                            Diagnosis = "Asthma",
                            Note = "Prescribed inhaler",
                            PatientId = 3,
                            Symptoms = "Shortness of breath",
                            UserId = 4
                        },
                        new
                        {
                            RecordId = 4,
                            Date = new DateTime(2025, 7, 10, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5588),
                            Diagnosis = "Hypertension",
                            Note = "Lifestyle changes needed",
                            PatientId = 4,
                            Symptoms = "High blood pressure",
                            UserId = 5
                        },
                        new
                        {
                            RecordId = 5,
                            Date = new DateTime(2025, 7, 15, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5589),
                            Diagnosis = "Gastritis",
                            Note = "Avoid spicy foods",
                            PatientId = 5,
                            Symptoms = "Stomach pain",
                            UserId = 6
                        },
                        new
                        {
                            RecordId = 6,
                            Date = new DateTime(2025, 7, 17, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5591),
                            Diagnosis = "Arthritis",
                            Note = "Physical therapy recommended",
                            PatientId = 6,
                            Symptoms = "Joint pain",
                            UserId = 7
                        },
                        new
                        {
                            RecordId = 7,
                            Date = new DateTime(2025, 7, 20, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5593),
                            Diagnosis = "Allergic reaction",
                            Note = "Avoid allergens",
                            PatientId = 7,
                            Symptoms = "Skin rash",
                            UserId = 8
                        },
                        new
                        {
                            RecordId = 8,
                            Date = new DateTime(2025, 7, 22, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5594),
                            Diagnosis = "Type 2 Diabetes",
                            Note = "Diet control important",
                            PatientId = 8,
                            Symptoms = "Diabetes symptoms",
                            UserId = 9
                        },
                        new
                        {
                            RecordId = 9,
                            Date = new DateTime(2025, 7, 23, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5596),
                            Diagnosis = "Anxiety disorder",
                            Note = "Counseling recommended",
                            PatientId = 1,
                            Symptoms = "Anxiety",
                            UserId = 10
                        },
                        new
                        {
                            RecordId = 10,
                            Date = new DateTime(2025, 7, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5597),
                            Diagnosis = "Hay fever",
                            Note = "Seasonal allergy",
                            PatientId = 2,
                            Symptoms = "Allergic rhinitis",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Paracetamol",
                            Unit = "tablet",
                            Usage = "Take 1-2 tablets every 4-6 hours"
                        },
                        new
                        {
                            MedicineId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Amoxicillin",
                            Unit = "capsule",
                            Usage = "Take 1 capsule 3 times daily"
                        },
                        new
                        {
                            MedicineId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Ibuprofen",
                            Unit = "tablet",
                            Usage = "Take 1 tablet every 8 hours"
                        },
                        new
                        {
                            MedicineId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Aspirin",
                            Unit = "tablet",
                            Usage = "Take 1 tablet daily"
                        },
                        new
                        {
                            MedicineId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Metformin",
                            Unit = "tablet",
                            Usage = "Take 1 tablet twice daily with meals"
                        },
                        new
                        {
                            MedicineId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Lisinopril",
                            Unit = "tablet",
                            Usage = "Take 1 tablet once daily"
                        },
                        new
                        {
                            MedicineId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Omeprazole",
                            Unit = "capsule",
                            Usage = "Take 1 capsule before breakfast"
                        },
                        new
                        {
                            MedicineId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Salbutamol",
                            Unit = "inhaler",
                            Usage = "2 puffs when needed"
                        },
                        new
                        {
                            MedicineId = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Diazepam",
                            Unit = "tablet",
                            Usage = "Take 1 tablet when needed"
                        },
                        new
                        {
                            MedicineId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Cetirizine",
                            Unit = "tablet",
                            Usage = "Take 1 tablet once daily"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiseaseDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnderlyingDiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            AccountId = 13,
                            Address = "123 Nguyen Trai, Hanoi",
                            AvatarPath = "/images/avatars/patient1.jpg",
                            DOB = new DateTime(1995, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseDetails = "Diagnosed with hypertension in 2020, managed with lifestyle changes and medication.",
                            Email = "patient1@email.com",
                            FullName = "Nguyen Thi K",
                            Gender = "Female",
                            Phone = "0987654321",
                            UnderlyingDiseases = "Hypertension"
                        },
                        new
                        {
                            PatientId = 2,
                            AccountId = 14,
                            Address = "456 Le Loi, Ho Chi Minh",
                            AvatarPath = "/images/avatars/patient2.jpg",
                            DOB = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseDetails = "No significant chronic conditions, occasional muscle strain from physical activity.",
                            Email = "patient2@email.com",
                            FullName = "Tran Van L",
                            Gender = "Male",
                            Phone = "0987654322",
                            UnderlyingDiseases = "None"
                        },
                        new
                        {
                            PatientId = 3,
                            AccountId = 15,
                            Address = "789 Tran Phu, Da Nang",
                            AvatarPath = "/images/avatars/patient3.jpg",
                            DOB = new DateTime(1988, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseDetails = "Diagnosed with asthma at age 15, uses inhaler as needed.",
                            Email = "patient3@email.com",
                            FullName = "Le Thi M",
                            Gender = "Female",
                            Phone = "0987654323",
                            UnderlyingDiseases = "Asthma"
                        },
                        new
                        {
                            PatientId = 4,
                            AccountId = 16,
                            Address = "321 Hai Ba Trung, Hue",
                            AvatarPath = "/images/avatars/patient4.jpg",
                            DOB = new DateTime(1990, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseDetails = "Hypertension since 2018, Type 2 Diabetes diagnosed in 2021, on metformin.",
                            Email = "patient4@email.com",
                            FullName = "Hoang Van N",
                            Gender = "Male",
                            Phone = "0987654324",
                            UnderlyingDiseases = "Hypertension, Type 2 Diabetes"
                        },
                        new
                        {
                            PatientId = 5,
                            AccountId = 17,
                            Address = "654 Dong Khoi, Can Tho",
                            AvatarPath = "/images/avatars/patient5.jpg",
                            DOB = new DateTime(1985, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseDetails = "Chronic gastritis diagnosed in 2019, managed with PPI and diet.",
                            Email = "patient5@email.com",
                            FullName = "Pham Thi O",
                            Gender = "Female",
                            Phone = "0987654325",
                            UnderlyingDiseases = "Gastritis"
                        },
                        new
                        {
                            PatientId = 6,
                            AccountId = 18,
                            Address = "987 Bach Dang, Hai Phong",
                            AvatarPath = "/images/avatars/patient6.jpg",
                            DOB = new DateTime(1993, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseDetails = "Rheumatoid arthritis diagnosed in 2022, on anti-inflammatory medication.",
                            Email = "patient6@email.com",
                            FullName = "Vu Van P",
                            Gender = "Male",
                            Phone = "0987654326",
                            UnderlyingDiseases = "Arthritis"
                        },
                        new
                        {
                            PatientId = 7,
                            AccountId = 19,
                            Address = "147 Ly Thuong Kiet, Nha Trang",
                            AvatarPath = "/images/avatars/patient7.jpg",
                            DOB = new DateTime(1987, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseDetails = "Seasonal allergies since childhood, managed with antihistamines.",
                            Email = "patient7@email.com",
                            FullName = "Dang Thi Q",
                            Gender = "Female",
                            Phone = "0987654327",
                            UnderlyingDiseases = "Allergic Rhinitis"
                        },
                        new
                        {
                            PatientId = 8,
                            AccountId = 20,
                            Address = "258 Quang Trung, Vung Tau",
                            AvatarPath = "/images/avatars/patient8.jpg",
                            DOB = new DateTime(1991, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiseaseDetails = "Diagnosed with Type 2 Diabetes in 2020, controlled with metformin and diet.",
                            Email = "patient8@email.com",
                            FullName = "Bui Van R",
                            Gender = "Male",
                            Phone = "0987654328",
                            UnderlyingDiseases = "Type 2 Diabetes"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("RecordId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            Date = new DateTime(2025, 6, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5708),
                            Dosage = "500mg twice daily",
                            MedicineId = 1,
                            Quantity = 20,
                            RecordId = 1
                        },
                        new
                        {
                            PrescriptionId = 2,
                            Date = new DateTime(2025, 6, 30, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5709),
                            Dosage = "400mg three times daily",
                            MedicineId = 3,
                            Quantity = 15,
                            RecordId = 2
                        },
                        new
                        {
                            PrescriptionId = 3,
                            Date = new DateTime(2025, 7, 5, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5711),
                            Dosage = "2 puffs as needed",
                            MedicineId = 8,
                            Quantity = 1,
                            RecordId = 3
                        },
                        new
                        {
                            PrescriptionId = 4,
                            Date = new DateTime(2025, 7, 10, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5713),
                            Dosage = "10mg once daily",
                            MedicineId = 6,
                            Quantity = 30,
                            RecordId = 4
                        },
                        new
                        {
                            PrescriptionId = 5,
                            Date = new DateTime(2025, 7, 15, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5714),
                            Dosage = "20mg before breakfast",
                            MedicineId = 7,
                            Quantity = 14,
                            RecordId = 5
                        },
                        new
                        {
                            PrescriptionId = 6,
                            Date = new DateTime(2025, 7, 17, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5715),
                            Dosage = "200mg twice daily",
                            MedicineId = 3,
                            Quantity = 30,
                            RecordId = 6
                        },
                        new
                        {
                            PrescriptionId = 7,
                            Date = new DateTime(2025, 7, 20, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5716),
                            Dosage = "10mg once daily",
                            MedicineId = 10,
                            Quantity = 10,
                            RecordId = 7
                        },
                        new
                        {
                            PrescriptionId = 8,
                            Date = new DateTime(2025, 7, 22, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5718),
                            Dosage = "500mg twice daily",
                            MedicineId = 5,
                            Quantity = 60,
                            RecordId = 8
                        },
                        new
                        {
                            PrescriptionId = 9,
                            Date = new DateTime(2025, 7, 23, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5719),
                            Dosage = "2mg as needed",
                            MedicineId = 9,
                            Quantity = 10,
                            RecordId = 9
                        },
                        new
                        {
                            PrescriptionId = 10,
                            Date = new DateTime(2025, 7, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5738),
                            Dosage = "10mg once daily",
                            MedicineId = 10,
                            Quantity = 30,
                            RecordId = 10
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");

                    b.HasData(
                        new
                        {
                            TokenId = 1,
                            AccountId = 1,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5764),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5764),
                            Token = "refresh_token_1"
                        },
                        new
                        {
                            TokenId = 2,
                            AccountId = 2,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5767),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5766),
                            Token = "refresh_token_2"
                        },
                        new
                        {
                            TokenId = 3,
                            AccountId = 3,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5768),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5768),
                            Token = "refresh_token_3"
                        },
                        new
                        {
                            TokenId = 4,
                            AccountId = 4,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5770),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5769),
                            Token = "refresh_token_4"
                        },
                        new
                        {
                            TokenId = 5,
                            AccountId = 5,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5771),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5771),
                            Token = "refresh_token_5"
                        },
                        new
                        {
                            TokenId = 6,
                            AccountId = 6,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5773),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5772),
                            Token = "refresh_token_6"
                        },
                        new
                        {
                            TokenId = 7,
                            AccountId = 7,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5774),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5774),
                            Token = "refresh_token_7"
                        },
                        new
                        {
                            TokenId = 8,
                            AccountId = 8,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5776),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5775),
                            Token = "refresh_token_8"
                        },
                        new
                        {
                            TokenId = 9,
                            AccountId = 9,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5777),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5777),
                            Token = "refresh_token_9"
                        },
                        new
                        {
                            TokenId = 10,
                            AccountId = 10,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5779),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5778),
                            Token = "refresh_token_10"
                        },
                        new
                        {
                            TokenId = 11,
                            AccountId = 11,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5780),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5780),
                            Token = "refresh_token_11"
                        },
                        new
                        {
                            TokenId = 12,
                            AccountId = 12,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5782),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5781),
                            Token = "refresh_token_12"
                        },
                        new
                        {
                            TokenId = 13,
                            AccountId = 13,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5783),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5783),
                            Token = "refresh_token_13"
                        },
                        new
                        {
                            TokenId = 14,
                            AccountId = 14,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5785),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5784),
                            Token = "refresh_token_14"
                        },
                        new
                        {
                            TokenId = 15,
                            AccountId = 15,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5786),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5786),
                            Token = "refresh_token_15"
                        },
                        new
                        {
                            TokenId = 16,
                            AccountId = 16,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5788),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5787),
                            Token = "refresh_token_16"
                        },
                        new
                        {
                            TokenId = 17,
                            AccountId = 17,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5789),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5789),
                            Token = "refresh_token_17"
                        },
                        new
                        {
                            TokenId = 18,
                            AccountId = 18,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5791),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5790),
                            Token = "refresh_token_18"
                        },
                        new
                        {
                            TokenId = 19,
                            AccountId = 19,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5792),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5792),
                            Token = "refresh_token_19"
                        },
                        new
                        {
                            TokenId = 20,
                            AccountId = 20,
                            CreatedDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5794),
                            ExpiryDate = new DateTime(2025, 8, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5793),
                            Token = "refresh_token_20"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Doctor"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Patient"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            Description = "Complete blood count analysis",
                            TestName = "Blood Test"
                        },
                        new
                        {
                            TestId = 2,
                            Description = "Chest X-ray examination",
                            TestName = "X-Ray"
                        },
                        new
                        {
                            TestId = 3,
                            Description = "Electrocardiogram test",
                            TestName = "ECG"
                        },
                        new
                        {
                            TestId = 4,
                            Description = "Abdominal ultrasound",
                            TestName = "Ultrasound"
                        },
                        new
                        {
                            TestId = 5,
                            Description = "Computed tomography scan",
                            TestName = "CT Scan"
                        },
                        new
                        {
                            TestId = 6,
                            Description = "Magnetic resonance imaging",
                            TestName = "MRI"
                        },
                        new
                        {
                            TestId = 7,
                            Description = "Urinalysis examination",
                            TestName = "Urine Test"
                        },
                        new
                        {
                            TestId = 8,
                            Description = "Glucose level test",
                            TestName = "Blood Sugar"
                        },
                        new
                        {
                            TestId = 9,
                            Description = "Lipid profile test",
                            TestName = "Cholesterol"
                        },
                        new
                        {
                            TestId = 10,
                            Description = "Hypertension screening",
                            TestName = "Blood Pressure"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.TestResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("ResultDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.HasIndex("RecordId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");

                    b.HasData(
                        new
                        {
                            ResultId = 1,
                            RecordId = 1,
                            ResultDetail = "WBC: 8.5, RBC: 4.2",
                            TestDate = new DateTime(2025, 6, 26, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5625),
                            TestId = 1,
                            UserId = 2
                        },
                        new
                        {
                            ResultId = 2,
                            RecordId = 2,
                            ResultDetail = "Chest clear, no abnormalities",
                            TestDate = new DateTime(2025, 7, 1, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5627),
                            TestId = 2,
                            UserId = 3
                        },
                        new
                        {
                            ResultId = 3,
                            RecordId = 3,
                            ResultDetail = "Normal heart rhythm",
                            TestDate = new DateTime(2025, 7, 6, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5628),
                            TestId = 3,
                            UserId = 4
                        },
                        new
                        {
                            ResultId = 4,
                            RecordId = 4,
                            ResultDetail = "BP: 140/90 mmHg",
                            TestDate = new DateTime(2025, 7, 11, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5630),
                            TestId = 10,
                            UserId = 5
                        },
                        new
                        {
                            ResultId = 5,
                            RecordId = 5,
                            ResultDetail = "Mild gastric inflammation",
                            TestDate = new DateTime(2025, 7, 16, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5631),
                            TestId = 4,
                            UserId = 6
                        },
                        new
                        {
                            ResultId = 6,
                            RecordId = 6,
                            ResultDetail = "Joint space narrowing",
                            TestDate = new DateTime(2025, 7, 18, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5632),
                            TestId = 2,
                            UserId = 7
                        },
                        new
                        {
                            ResultId = 7,
                            RecordId = 7,
                            ResultDetail = "Elevated eosinophils",
                            TestDate = new DateTime(2025, 7, 21, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5633),
                            TestId = 1,
                            UserId = 8
                        },
                        new
                        {
                            ResultId = 8,
                            RecordId = 8,
                            ResultDetail = "Glucose: 180 mg/dL",
                            TestDate = new DateTime(2025, 7, 23, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5634),
                            TestId = 8,
                            UserId = 9
                        },
                        new
                        {
                            ResultId = 9,
                            RecordId = 9,
                            ResultDetail = "Normal blood parameters",
                            TestDate = new DateTime(2025, 7, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5636),
                            TestId = 1,
                            UserId = 10
                        },
                        new
                        {
                            ResultId = 10,
                            RecordId = 10,
                            ResultDetail = "Increased histamine levels",
                            TestDate = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5637),
                            TestId = 7,
                            UserId = 11
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.TestResultHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestResultId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestResultId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResultHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 6, 26, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5660),
                            TestResultId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 1, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5662),
                            TestResultId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 6, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5663),
                            TestResultId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 11, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5664),
                            TestResultId = 4,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 16, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5665),
                            TestResultId = 5,
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 18, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5667),
                            TestResultId = 6,
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 21, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5668),
                            TestResultId = 7,
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 23, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5669),
                            TestResultId = 8,
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 24, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5670),
                            TestResultId = 9,
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Action = "Create",
                            ActionTime = new DateTime(2025, 7, 25, 21, 58, 46, 500, DateTimeKind.Local).AddTicks(5671),
                            TestResultId = 10,
                            UserId = 11
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountId = 1,
                            DOB = new DateTime(1975, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@clinic.com",
                            FullName = "Admin User",
                            Gender = "Male",
                            Phone = "0901234560"
                        },
                        new
                        {
                            UserId = 2,
                            AccountId = 2,
                            DOB = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor1@clinic.com",
                            FullName = "Dr. Nguyen Van A",
                            Gender = "Male",
                            Phone = "0901234567"
                        },
                        new
                        {
                            UserId = 3,
                            AccountId = 3,
                            DOB = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor2@clinic.com",
                            FullName = "Dr. Le Thi B",
                            Gender = "Female",
                            Phone = "0901234568"
                        },
                        new
                        {
                            UserId = 4,
                            AccountId = 4,
                            DOB = new DateTime(1978, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor3@clinic.com",
                            FullName = "Dr. Tran Van C",
                            Gender = "Male",
                            Phone = "0901234570"
                        },
                        new
                        {
                            UserId = 5,
                            AccountId = 5,
                            DOB = new DateTime(1982, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor4@clinic.com",
                            FullName = "Dr. Pham Minh D",
                            Gender = "Male",
                            Phone = "0901234571"
                        },
                        new
                        {
                            UserId = 6,
                            AccountId = 6,
                            DOB = new DateTime(1975, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor5@clinic.com",
                            FullName = "Dr. Hoang Thi E",
                            Gender = "Female",
                            Phone = "0901234572"
                        },
                        new
                        {
                            UserId = 7,
                            AccountId = 7,
                            DOB = new DateTime(1988, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor6@clinic.com",
                            FullName = "Dr. Vu Van F",
                            Gender = "Male",
                            Phone = "0901234573"
                        },
                        new
                        {
                            UserId = 8,
                            AccountId = 8,
                            DOB = new DateTime(1983, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor7@clinic.com",
                            FullName = "Dr. Dang Thi G",
                            Gender = "Female",
                            Phone = "0901234574"
                        },
                        new
                        {
                            UserId = 9,
                            AccountId = 9,
                            DOB = new DateTime(1987, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor8@clinic.com",
                            FullName = "Dr. Bui Van H",
                            Gender = "Male",
                            Phone = "0901234575"
                        },
                        new
                        {
                            UserId = 10,
                            AccountId = 10,
                            DOB = new DateTime(1981, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor9@clinic.com",
                            FullName = "Dr. Do Thi I",
                            Gender = "Female",
                            Phone = "0901234576"
                        },
                        new
                        {
                            UserId = 11,
                            AccountId = 11,
                            DOB = new DateTime(1984, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor10@clinic.com",
                            FullName = "Dr. Ngo Van J",
                            Gender = "Male",
                            Phone = "0901234577"
                        },
                        new
                        {
                            UserId = 12,
                            AccountId = 12,
                            DOB = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff1@clinic.com",
                            FullName = "Staff Ngo Van K",
                            Gender = "Male",
                            Phone = "0901234569"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.models.Account", b =>
                {
                    b.HasOne("DataAccessLayer.models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccessLayer.models.MedicalRecord", b =>
                {
                    b.HasOne("DataAccessLayer.models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.User", "User")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.models.Patient", b =>
                {
                    b.HasOne("DataAccessLayer.models.Account", "Account")
                        .WithOne("Patient")
                        .HasForeignKey("DataAccessLayer.models.Patient", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataAccessLayer.models.Prescription", b =>
                {
                    b.HasOne("DataAccessLayer.models.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.MedicalRecord", "MedicalRecord")
                        .WithMany("Prescriptions")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("DataAccessLayer.models.RefreshToken", b =>
                {
                    b.HasOne("DataAccessLayer.models.Account", "Account")
                        .WithOne("RefreshToken")
                        .HasForeignKey("DataAccessLayer.models.RefreshToken", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataAccessLayer.models.TestResult", b =>
                {
                    b.HasOne("DataAccessLayer.models.MedicalRecord", "MedicalRecord")
                        .WithMany("TestResults")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.models.TestResultHistory", b =>
                {
                    b.HasOne("DataAccessLayer.models.TestResult", null)
                        .WithMany()
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.models.User", b =>
                {
                    b.HasOne("DataAccessLayer.models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("DataAccessLayer.models.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataAccessLayer.models.Account", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("RefreshToken")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.models.MedicalRecord", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("DataAccessLayer.models.Medicine", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("DataAccessLayer.models.Patient", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("DataAccessLayer.models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DataAccessLayer.models.Test", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("DataAccessLayer.models.User", b =>
                {
                    b.Navigation("MedicalRecords");

                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
